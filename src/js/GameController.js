import themes from './themes.js';
import PositionedCharacter from './PositionedCharacter.js';
import Bowman from './characters/Bowman.js';
import Daemon from './characters/Daemon.js';
import Magician from './characters/Magician.js';
import Swordsman from './characters/Swordsman.js';
import Undead from './characters/Undead.js';
import Vampire from './characters/Vampire.js';
import { characterGenerator, generateTeam } from './generators.js';
import Character from './Character.js';

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
  }

  init() {
    // TODO: add event listeners to gamePlay events
    // TODO: load saved stated from stateService
    // const img = document.getElementById('game-container');

    document.addEventListener('DOMContentLoaded', () => {
      this.gamePlay.drawUi(themes.prairie);

      // –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –õ–í–õ –¥–ª—è —Å–º–µ–Ω—ã –∫–∞—Ä—Ç
      if (false) {
        for (const item in themes) {
          console.log(themes[item]);
        }
      }

      /*
      const playerGenerator = characterGenerator([Bowman, Swordsman, Magician], 2); // —Ç–∏–ø –∏ –º–∞–∫—Å —É—Ä–æ–≤–µ–Ω—å
      const cmpGenerator = characterGenerator([Daemon, Undead, Vampire], 2); // —Ç–∏–ø –∏ –º–∞–∫—Å —É—Ä–æ–≤–µ–Ω—å

      let massUnits = [];
      // —Ä–∞–Ω–¥–æ–º–∏–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞ –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤
      randomPositionPlayerLeft(this.gamePlay.boardSize, 3).forEach((point) => {
        massUnits.push(new PositionedCharacter(playerGenerator.next().value, point));
      });
      // —Ä–∞–Ω–¥–æ–º–∏–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤
      randomPositionPlayerRight(this.gamePlay.boardSize, 3).forEach((point) => {
        massUnits.push(new PositionedCharacter(cmpGenerator.next().value, point));
        
        //this.gamePlay.redrawPositions(massUnits);
      });*/

      const countTeamPlayer = 3;
      const countTeamCmp = 3;
      // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
      const team2 = generateTeam([Bowman, Swordsman, Magician], 3, countTeamPlayer); // –º–∞—Å—Å–∏–≤ –∏–∑ 4 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π playerTypes —Å —É—Ä–æ–≤–Ω–µ–º 1, 2 –∏–ª–∏ 3
      const team3 = generateTeam([Daemon, Undead, Vampire], 3, countTeamCmp); // –º–∞—Å—Å–∏–≤ –∏–∑ 4 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π playerTypes —Å —É—Ä–æ–≤–Ω–µ–º 1, 2 –∏–ª–∏ 3
      let massUnits2 = [];

      // –≥–µ—Ä–µ–Ω–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞
      const randomPointsLeft = randomPositionPlayerLeft(this.gamePlay.boardSize, countTeamPlayer); 
      randomPointsLeft.forEach((point, index) => {
          massUnits2.push(new PositionedCharacter(team2.getCharacters()[index], point));
      });

      // –≥–µ—Ä–µ–Ω–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      const randomPointsRight = randomPositionPlayerRight(this.gamePlay.boardSize, countTeamCmp); 
      randomPointsRight.forEach((point, index) => {
          massUnits2.push(new PositionedCharacter(team3.getCharacters()[index], point));
      });
      
      this.gamePlay.redrawPositions(massUnits2); // –≤—ã–≤–æ–¥–∏–º –Ω–∞ –ø–æ–ª–µ

    });

    document.addEventListener('mouseover', (event) => {
      // this.someMethodName();  
      const characterElement = event.target.closest('.character'); 
      if (characterElement) {  
        console.log('–≤—ã–ø–æ–¥ –ø–æ–¥—Å–∫–∞–∑–∫–∏ + characterElement: ' + characterElement);
        //const index = this.getIndex(characterElement); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞  
       // const index = this.getCharacterData(characterElement); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞  
        this.onCellEnter(index);  
      } 
    });

    // —Ä–∞–Ω–¥–æ–º–∏–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞
    function randomPositionPlayerLeft(boardSize, countUnits) {
      let randomUnitsLeft = []; // –º–∞—Å—Å–∏–≤ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤
      const randomPositionPlayerLeft = []; // –º–∞—Å—Å–∏–≤ –ª–µ–≤—ã—Ö –¥–≤—É—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ 

      for (let row = 0; row < boardSize; row++) {
        randomPositionPlayerLeft.push(row * boardSize);
        randomPositionPlayerLeft.push(row * boardSize + 1);
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π  
      while (randomUnitsLeft.length < countUnits) {
        const p = Math.floor(Math.random() * randomPositionPlayerLeft.length);

        // –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if (!randomUnitsLeft.includes(randomPositionPlayerLeft[p])) {
          randomUnitsLeft.push(randomPositionPlayerLeft[p]);
        }
      }

      return randomUnitsLeft;
    }

    // —Ä–∞–Ω–¥–æ–º–∏–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    function randomPositionPlayerRight(boardSize, countUnits) {
      let randomUnitsRight = []; // –º–∞—Å—Å–∏–≤ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤
      const randomPositionPlayerRight = []; // –º–∞—Å—Å–∏–≤ –ø—Ä–∞–≤—ã—Ö –¥–≤—É—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ 

      for (let row = 0; row < boardSize; row++) {
        randomPositionPlayerRight.push(row * boardSize + (boardSize - 2));
        randomPositionPlayerRight.push(row * boardSize + (boardSize - 1));
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π  
      while (randomUnitsRight.length < countUnits) {
        const p = Math.floor(Math.random() * randomPositionPlayerRight.length);

        // –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if (!randomUnitsRight.includes(randomPositionPlayerRight[p])) {
          randomUnitsRight.push(randomPositionPlayerRight[p]);
        }
      }

      return randomUnitsRight;
    }

    
  }

  someMethodName() { // <- —á—Ç–æ —ç—Ç–æ –∑–∞ –º–µ—Ç–æ–¥ –∏ –≥–¥–µ —ç—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ—à–∏—Ç–µ —Å–∞–º–∏
    this.gameplay.addCellEnterListener(this.onCellEnter);   
  }


  onCellClick(index) {
    // TODO: react to click

  }

  onCellEnter(index) {
    // TODO: react to mouse enter
    console.log('index —ç—Ç–æ: ' + index);
    // const character = this.getCharacterData(index);  
    //const character = this.getCharacterData();  
    // this.gamePlay.showCellTooltip(`U+1F396 1 U+2694 U+1F6E1 U+2764`, index);
    //this.gamePlay.showCellTooltip('–≤—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞', index);

    const character = this.gameplay.cells[index];  
    if (character) {  
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ  
      const tooltipMessage = this.formatCharacterInfo(character);  
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É  
      this.gameplay.showCellTooltip(tooltipMessage, index);  
    } 
  }

  onCellLeave(index) {
    // TODO: react to mouse leave
    this.gamePlay.hideCellTooltip();
  }

  // –ú–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ  
  formatCharacterInfo({ level, attack, defense, health }) {  
    return `üéñ${level} ‚öî${attack} üõ°${defense} ‚ù§${health}`;  
  } 
}
